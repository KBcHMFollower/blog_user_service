// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: users.proto

//protoc -I api/protos/proto api/protos/proto/users.proto --go_out=./api/protos/gen/users --go_opt=paths=source_relative --go-grpc_out=./api/protos/gen/users/ --go-grpc_opt=paths=source_relative

package usersv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UsersService_GetUser_FullMethodName          = "/users.UsersService/GetUser"
	UsersService_Subscribe_FullMethodName        = "/users.UsersService/Subscribe"
	UsersService_Unsubscribe_FullMethodName      = "/users.UsersService/Unsubscribe"
	UsersService_GetSubscribers_FullMethodName   = "/users.UsersService/GetSubscribers"
	UsersService_GetSubscriptions_FullMethodName = "/users.UsersService/GetSubscriptions"
	UsersService_UpdateUser_FullMethodName       = "/users.UsersService/UpdateUser"
	UsersService_DeleteUser_FullMethodName       = "/users.UsersService/DeleteUser"
	UsersService_UploadAvatar_FullMethodName     = "/users.UsersService/UploadAvatar"
)

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	GetUser(ctx context.Context, in *GetUserDTO, opts ...grpc.CallOption) (*GetUserRDO, error)
	Subscribe(ctx context.Context, in *SubscribeDTO, opts ...grpc.CallOption) (*SubscribeRDO, error)
	Unsubscribe(ctx context.Context, in *SubscribeDTO, opts ...grpc.CallOption) (*SubscribeRDO, error)
	GetSubscribers(ctx context.Context, in *GetSubscribersDTO, opts ...grpc.CallOption) (*GetSubscribersRDO, error)
	GetSubscriptions(ctx context.Context, in *GetSubscriptionsDTO, opts ...grpc.CallOption) (*GetSubscriptionsRDO, error)
	UpdateUser(ctx context.Context, in *UpdateUserDTO, opts ...grpc.CallOption) (*UpdateUserRDO, error)
	DeleteUser(ctx context.Context, in *DeleteUserDTO, opts ...grpc.CallOption) (*DeleteUserRDO, error)
	UploadAvatar(ctx context.Context, in *UploadAvatarDTO, opts ...grpc.CallOption) (*UploadAvatarRDO, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) GetUser(ctx context.Context, in *GetUserDTO, opts ...grpc.CallOption) (*GetUserRDO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRDO)
	err := c.cc.Invoke(ctx, UsersService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Subscribe(ctx context.Context, in *SubscribeDTO, opts ...grpc.CallOption) (*SubscribeRDO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeRDO)
	err := c.cc.Invoke(ctx, UsersService_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Unsubscribe(ctx context.Context, in *SubscribeDTO, opts ...grpc.CallOption) (*SubscribeRDO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeRDO)
	err := c.cc.Invoke(ctx, UsersService_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetSubscribers(ctx context.Context, in *GetSubscribersDTO, opts ...grpc.CallOption) (*GetSubscribersRDO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubscribersRDO)
	err := c.cc.Invoke(ctx, UsersService_GetSubscribers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetSubscriptions(ctx context.Context, in *GetSubscriptionsDTO, opts ...grpc.CallOption) (*GetSubscriptionsRDO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubscriptionsRDO)
	err := c.cc.Invoke(ctx, UsersService_GetSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateUser(ctx context.Context, in *UpdateUserDTO, opts ...grpc.CallOption) (*UpdateUserRDO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserRDO)
	err := c.cc.Invoke(ctx, UsersService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteUser(ctx context.Context, in *DeleteUserDTO, opts ...grpc.CallOption) (*DeleteUserRDO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserRDO)
	err := c.cc.Invoke(ctx, UsersService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UploadAvatar(ctx context.Context, in *UploadAvatarDTO, opts ...grpc.CallOption) (*UploadAvatarRDO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadAvatarRDO)
	err := c.cc.Invoke(ctx, UsersService_UploadAvatar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	GetUser(context.Context, *GetUserDTO) (*GetUserRDO, error)
	Subscribe(context.Context, *SubscribeDTO) (*SubscribeRDO, error)
	Unsubscribe(context.Context, *SubscribeDTO) (*SubscribeRDO, error)
	GetSubscribers(context.Context, *GetSubscribersDTO) (*GetSubscribersRDO, error)
	GetSubscriptions(context.Context, *GetSubscriptionsDTO) (*GetSubscriptionsRDO, error)
	UpdateUser(context.Context, *UpdateUserDTO) (*UpdateUserRDO, error)
	DeleteUser(context.Context, *DeleteUserDTO) (*DeleteUserRDO, error)
	UploadAvatar(context.Context, *UploadAvatarDTO) (*UploadAvatarRDO, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) GetUser(context.Context, *GetUserDTO) (*GetUserRDO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsersServiceServer) Subscribe(context.Context, *SubscribeDTO) (*SubscribeRDO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedUsersServiceServer) Unsubscribe(context.Context, *SubscribeDTO) (*SubscribeRDO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedUsersServiceServer) GetSubscribers(context.Context, *GetSubscribersDTO) (*GetSubscribersRDO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribers not implemented")
}
func (UnimplementedUsersServiceServer) GetSubscriptions(context.Context, *GetSubscriptionsDTO) (*GetSubscriptionsRDO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptions not implemented")
}
func (UnimplementedUsersServiceServer) UpdateUser(context.Context, *UpdateUserDTO) (*UpdateUserRDO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUsersServiceServer) DeleteUser(context.Context, *DeleteUserDTO) (*DeleteUserRDO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUsersServiceServer) UploadAvatar(context.Context, *UploadAvatarDTO) (*UploadAvatarRDO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAvatar not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUser(ctx, req.(*GetUserDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Subscribe(ctx, req.(*SubscribeDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Unsubscribe(ctx, req.(*SubscribeDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscribersDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetSubscribers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetSubscribers(ctx, req.(*GetSubscribersDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionsDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetSubscriptions(ctx, req.(*GetSubscriptionsDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateUser(ctx, req.(*UpdateUserDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteUser(ctx, req.(*DeleteUserDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UploadAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAvatarDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UploadAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UploadAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UploadAvatar(ctx, req.(*UploadAvatarDTO))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UsersService_GetUser_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _UsersService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _UsersService_Unsubscribe_Handler,
		},
		{
			MethodName: "GetSubscribers",
			Handler:    _UsersService_GetSubscribers_Handler,
		},
		{
			MethodName: "GetSubscriptions",
			Handler:    _UsersService_GetSubscriptions_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UsersService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UsersService_DeleteUser_Handler,
		},
		{
			MethodName: "UploadAvatar",
			Handler:    _UsersService_UploadAvatar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}
